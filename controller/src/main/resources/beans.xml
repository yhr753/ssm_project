<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/util"
       xmlns:contex="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

        <!--扫描spring注解：排除掉@Controller-->
        <contex:component-scan base-package="com">
                <contex:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></contex:exclude-filter>
        </contex:component-scan>


    <!--加载属性文件-->
        <!--<contex:property-placeholder location="classpath*:db.properties"></contex:property-placeholder>-->

        <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
                <property name="location" value="classpath:db.properties"></property>
        </bean>

        <!--创建数据源
        相当于：DruidDataSource dataSource = new DruidDataSource()
        -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
                <property name="driverClassName" value="${driverClassName}"></property>
                <property name="url" value="${url}"></property>
                <property name="username" value="${username}"></property>
                <property name="password" value="${password}"></property>
        </bean>


        <!--创建SqlSessionFactory对象-->
        <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
                <property name="dataSource" ref="dataSource"></property>
                <!--配置别名-->
                <property name="typeAliasesPackage" value="com.guigu.pojo"></property>
                <!--添加分页插件-->
                <property name="plugins">
                        <array>
                                <bean class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor"></bean>
                                <bean class="com.github.pagehelper.PageInterceptor">
                                        <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                                        <property name="properties">
                                                <value>
                                                        helperDialect=mysql
                                                        <!--reasonable=true-->
                                                        <!--supportMethodsArguments=true-->
                                                        <!--params=count=countSql-->
                                                        <!--autoRuntimeDialect=true-->
                                                </value>
                                        </property>
                                </bean>
                        </array>
                </property>
        </bean>

        <!--创建扫描mapper的代理器工厂
                作用：扫描指定的接口，并且自动生成接口的实现类
                      并返回给spring容器
        -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                <!--配置要扫描的mapper接口-->
                <property name="basePackage" value="top.yhrid"></property>
                <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        </bean>


</beans>
